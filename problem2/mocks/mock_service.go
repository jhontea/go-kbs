// Code generated by MockGen. DO NOT EDIT.
// Source: services/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "go-kbs-soccer/entities/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamService is a mock of TeamService interface.
type MockTeamService struct {
	ctrl     *gomock.Controller
	recorder *MockTeamServiceMockRecorder
}

// MockTeamServiceMockRecorder is the mock recorder for MockTeamService.
type MockTeamServiceMockRecorder struct {
	mock *MockTeamService
}

// NewMockTeamService creates a new mock instance.
func NewMockTeamService(ctrl *gomock.Controller) *MockTeamService {
	mock := &MockTeamService{ctrl: ctrl}
	mock.recorder = &MockTeamServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamService) EXPECT() *MockTeamServiceMockRecorder {
	return m.recorder
}

// GetTeam mocks base method.
func (m *MockTeamService) GetTeam(ctx context.Context, name string) (models.TeamPlayers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, name)
	ret0, _ := ret[0].(models.TeamPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamServiceMockRecorder) GetTeam(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamService)(nil).GetTeam), ctx, name)
}

// StoreTeam mocks base method.
func (m *MockTeamService) StoreTeam(ctx context.Context, team models.Team) (models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTeam", ctx, team)
	ret0, _ := ret[0].(models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreTeam indicates an expected call of StoreTeam.
func (mr *MockTeamServiceMockRecorder) StoreTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTeam", reflect.TypeOf((*MockTeamService)(nil).StoreTeam), ctx, team)
}

// MockPlayerService is a mock of PlayerService interface.
type MockPlayerService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServiceMockRecorder
}

// MockPlayerServiceMockRecorder is the mock recorder for MockPlayerService.
type MockPlayerServiceMockRecorder struct {
	mock *MockPlayerService
}

// NewMockPlayerService creates a new mock instance.
func NewMockPlayerService(ctrl *gomock.Controller) *MockPlayerService {
	mock := &MockPlayerService{ctrl: ctrl}
	mock.recorder = &MockPlayerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerService) EXPECT() *MockPlayerServiceMockRecorder {
	return m.recorder
}

// GetPlayer mocks base method.
func (m *MockPlayerService) GetPlayer(ctx context.Context, name string) ([]models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", ctx, name)
	ret0, _ := ret[0].([]models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockPlayerServiceMockRecorder) GetPlayer(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPlayerService)(nil).GetPlayer), ctx, name)
}

// StorePlayer mocks base method.
func (m *MockPlayerService) StorePlayer(ctx context.Context, player models.Player) (models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePlayer", ctx, player)
	ret0, _ := ret[0].(models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePlayer indicates an expected call of StorePlayer.
func (mr *MockPlayerServiceMockRecorder) StorePlayer(ctx, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePlayer", reflect.TypeOf((*MockPlayerService)(nil).StorePlayer), ctx, player)
}
