// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "go-kbs-soccer/entities/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTeamRepository is a mock of TeamRepository interface.
type MockTeamRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTeamRepositoryMockRecorder
}

// MockTeamRepositoryMockRecorder is the mock recorder for MockTeamRepository.
type MockTeamRepositoryMockRecorder struct {
	mock *MockTeamRepository
}

// NewMockTeamRepository creates a new mock instance.
func NewMockTeamRepository(ctrl *gomock.Controller) *MockTeamRepository {
	mock := &MockTeamRepository{ctrl: ctrl}
	mock.recorder = &MockTeamRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeamRepository) EXPECT() *MockTeamRepositoryMockRecorder {
	return m.recorder
}

// GetTeam mocks base method.
func (m *MockTeamRepository) GetTeam(ctx context.Context, name string) (models.TeamPlayers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, name)
	ret0, _ := ret[0].(models.TeamPlayers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockTeamRepositoryMockRecorder) GetTeam(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockTeamRepository)(nil).GetTeam), ctx, name)
}

// StoreTeam mocks base method.
func (m *MockTeamRepository) StoreTeam(ctx context.Context, team models.Team) (models.Team, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTeam", ctx, team)
	ret0, _ := ret[0].(models.Team)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreTeam indicates an expected call of StoreTeam.
func (mr *MockTeamRepositoryMockRecorder) StoreTeam(ctx, team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTeam", reflect.TypeOf((*MockTeamRepository)(nil).StoreTeam), ctx, team)
}

// MockPlayerRepository is a mock of PlayerRepository interface.
type MockPlayerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerRepositoryMockRecorder
}

// MockPlayerRepositoryMockRecorder is the mock recorder for MockPlayerRepository.
type MockPlayerRepositoryMockRecorder struct {
	mock *MockPlayerRepository
}

// NewMockPlayerRepository creates a new mock instance.
func NewMockPlayerRepository(ctrl *gomock.Controller) *MockPlayerRepository {
	mock := &MockPlayerRepository{ctrl: ctrl}
	mock.recorder = &MockPlayerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerRepository) EXPECT() *MockPlayerRepositoryMockRecorder {
	return m.recorder
}

// GetPlayer mocks base method.
func (m *MockPlayerRepository) GetPlayer(ctx context.Context, name string) ([]models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlayer", ctx, name)
	ret0, _ := ret[0].([]models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlayer indicates an expected call of GetPlayer.
func (mr *MockPlayerRepositoryMockRecorder) GetPlayer(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlayer", reflect.TypeOf((*MockPlayerRepository)(nil).GetPlayer), ctx, name)
}

// StorePlayer mocks base method.
func (m *MockPlayerRepository) StorePlayer(ctx context.Context, player models.Player) (models.Player, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePlayer", ctx, player)
	ret0, _ := ret[0].(models.Player)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePlayer indicates an expected call of StorePlayer.
func (mr *MockPlayerRepositoryMockRecorder) StorePlayer(ctx, player interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePlayer", reflect.TypeOf((*MockPlayerRepository)(nil).StorePlayer), ctx, player)
}
